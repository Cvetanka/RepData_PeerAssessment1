makeVector <- function(x = numeric()) {
        m <- NULL
        set <- function(y) {
                x <<- y
                m <<- NULL
        }
        get <- function() x
        setmean <- function(mean) m <<- mean
        getmean <- function() m
        list(set = set, get = get,
             setmean = setmean,
             getmean = getmean)
}
makeVector
?colClasses
library(datasets)
data(iris)
?iris
apply(iris[, 1:4], 2, mean)
iris
colMeans(iris)
rowMeans(iris[, 1:4])
apply(iris, 2, mean)
?iris
apply(iris[, 1:4], mean)
apply(iris[, 1:4], 1, mean)
apply(iris[, 1:4], 3, mean)
apply(iris[, 1:4], 2, mean)
library(datasets)
data(mtcars)
?mtcars
tapply(mtcars$cyl, mtcars$mpg, mean)
mean(mtcars$mpg, mtcars$cyl)
tapply(mtcars$mpg, mtcars$cyl, mean)
lapply(mtcars, mean)
mtcars
tapply(mtcars$cyl, mtcars$mpg, mean)
tapply(mtcars$cyl == 6, mtcars$hp, mean)
tapply(mtcars$hp, mtcars$cyl == 6, mean)
a <- subset(mtcars, mtcars$cyl == 6)
a
mean(a$hp)
tapply(mtcars$hp, mtcars$cyl == 4)
tapply(mtcars$hp, mtcars$cyl == 4, mean)
b <- subset(mtcars, mtcars$cyl == 4)
b
mean(b$hp)
mean(a$hp) - mean(b$hp)
tapply(mtcars$hp, mtcars$cyl == 8, mean)
c <- subset(mtcars, mtcars$cyl == 8, mean)
c <- subset(mtcars, mtcars$cyl == 8)
c
mean(c$hp)
mean(c$hp)-mean(b$hp)
abs[mean(c$hp) - mean(b$hp)]
iris
vir <- subset(iris, iris$Species == virginica)
vir <- subset(iris, iris$Species == vivirginica
q
vir <- subset(iris, iris$Species ==virginica
vir <- subset(iris, iris$Species == virginica)
vir
vir <- subset(iris, iris$Species = virginica)
vir <- subset(iris, iris$Species == virginica)
vir <- subset(iris, 101:150, iris$Species)
apply(iris[, 4], 2, mean)
apply(iris[,1:4], 2, mean)
apply(iris, iris$Sepal.Length, mean)
apply(iris, iris$Sepal.Length, 2, mean)
newdata <- mydata[ which(mydata$gender=='F'
& mydata$age > 65), ]
ir <- iris[ which(iris$Spices == "virginica")
q
ir <- iris[ which(iris$Spices == "virginica"), ]
ir
ir <- subset(iris, iris$Species == "virginica")
ir
mean(ir$Sepal.Length)
tapply(mtcars$mpg, mtcars$cyl, mean)
8hrs <- tapply(mtcars$hrs, mtcars$cyl == 8, mean)
tapply(mtcars$hrs, mtcars$cyl == 8, mean)
tapply(mtcars$cyl == 8, mtcars$hrs, mean)
tapply(mtcars$hrs, mtcars$cyl, mean)
tapply(mtcars$hp, mtcars$cyl == 8, mean)
8hp <- tapply(mtcars$hrs, mtcars$cyl == 8)
8hp <- tapply(mtcars$hp, mtcars$cyl == 8)
8hp <- tapply(mtcars$hp, mtcars$cyl == 8, mean)
8hp <- tapply(mtcars$hp, mtcars$cyl == 8, mean)
aaa <- tapply(mtcars$hp, mtcars$cyl == 8, mean)
aaa
bbb <- tapply(mtcars$hp, mtcars$cyl == 4, mean)
bbb
aaa-bbb
ccc = abs(aaa-bbb)
ccc
ccc = (aaa - bbb, ignore.case == FALSE)
aaa <- tapply(mtcars$hp, mtcars$cyl == 8, mean, ignore.case == FALSE)
?ignore.case
?ignore.case
aaa <- tapply(mtcars$hp, mtcars$cyl == 8, mean, ignore.case = FALSE)
aaa
aaa <- tapply(mtcars$hp, mtcars$cyl == 8, mean, ignore.case = TRUE)
aaa
aaa
debug(ls)
Is
Is()
debug(iris)
debug(ls)
ls
ls()
q
q
makeCacheMatrix <- function(x = matrix()) {
    inv <- NULL
    set <- function(y) {
        x <<- y
        inv <<- NULL
    }
    get <- function() x
    setinverse <- function(inverse) inv <<- inverse
    getinverse <- function() inv
    list(set=set, get=get, setinverse=setinverse, getinverse=getinverse)
}
cacheSolve <- function(x, ...) {
    inv <- x$getinverse()
    if(!is.null(inv)) {
        message("getting cached data.")
        return(inv)
    }
    data <- x$get()
    inv <- solve(data)
    x$setinverse(inv)
    inv
}
cacheSolve
clock_t clock()
clock_t clock
?clock_t clock
makeVector <- function(x = numeric()) {
        m <- NULL
        set <- function(y) {
                x <<- y
                m <<- NULL
        }
        get <- function() x
        setmean <- function(mean) m <<- mean
        getmean <- function() m
        list(set = set, get = get,
             setmean = setmean,
             getmean = getmean)
}
cachemean <- function(x, ...) {
        m <- x$getmean()
        if(!is.null(m)) {
                message("getting cached data")
                return(m)
        }
        data <- x$get()
        m <- mean(data, ...)
        x$setmean(m)
        m
}
cachemean
makeVector
y <- 10
f1 <- function(x) {
  function() {
    x + 10
  }
}
f1(1)()
f1()
install.packages("MASS")
makeVector <- function(x = numeric()) {
        m <- NULL
        set <- function(y) {
                x <<- y
                m <<- NULL
        }
        get <- function() x
        setmean <- function(mean) m <<- mean
        getmean <- function() m
        list(set = set, get = get,
             setmean = setmean,
             getmean = getmean)
}
v<- c(1,2,3)
v
makeVector(v)
mean(v)
cachemean <- function(x, ...) {
        m <- x$getmean()
        if(!is.null(m)) {
                message("getting cached data")
                return(m)
        }
        data <- x$get()
        m <- mean(data, ...)
        x$setmean(m)
        m
}
cashemean(v)
cachemean(v)
cachemean
?ginv
MASS package
?MASS.package
makeCacheMatrix <- function(x = matrix()) {
  A <- NULL
  set <- function(y) {
    x <<- y
    A <<- NULL
  }
  get <- function()x
  setmatrix_inv <- function(solve) A <<- solve
  getmatrix_inv <- function() A
  list(set = set, get = get,
       setmatrix_inv = setmatrix_inv,
       getmatrix_inv = getmatrix_inv)
}
makeCacheMatrix(A)
solve(A)
A = matrix(c(2,4,3,1,5,7,8,9,1), nrow=3, ncol =3)
A
solve(A)
makeCacheMatrix <- function(x = matrix()) {
  A <- NULL
  set <- function(y) {
    x <<- y
    A <<- NULL
  }
  get <- function()x
  setmatrix_inv <- function(ginv) A <<- ginv
  getmatrix_inv <- function() A
  list(set = set, get = get,
       setmatrix_inv = setmatrix_inv,
       getmatrix_inv = getmatrix_inv)
}
makeCacheMatrix
makeCacheMatrix(A)
ginv(A)
makeCacheMatrix <- function(x = matrix()) {
  A <- NULL
  set <- function(y) {
    x <<- y
    A <<- NULL
  }
  get <- function()x
  setmatrix_inv <- function(solve) A <<- solve
  getmatrix_inv <- function() A
  list(set = set, get = get,
       setmatrix_inv = setmatrix_inv,
       getmatrix_inv = getmatrix_inv)
}
makeCacheMatrix(A)
makeCacheMatrix()
m$set( matrix( c(0, 2, 2, 0 ), 2, 2))
m<- makeCacheMatrix( )
m
m$set( matrix( c(0, 2, 2, 0 ), 2, 2))
m$set
m$get()
cacheSolve( m )
cacheSolve( m )
m$get() %*% cacheSolve(m)
all.equal( diag(2), m$get() %*% cacheSolve(m) )
cachemean(makeVector(c(1:10)))
A <-  matrix( c(0, 2, 2, 0 ), 2, 2))
A <-  matrix( c(0, 2, 2, 0 ), 2, 2)
A
cacheSolve(A)
cacheSolve(makeCacheMatrix(A))
v <- makevector(c(1,2,3,4))
q
v <- makevector(c(1,2,3,4))
?inverse
??inverse
q
q()
q()
q()
q()
q()
q()
q()
q()
q()
library(swirl)
q
q()
getwd()
setwd("C:/Users/Cvetanka/Desktop/Cvetanka/Coursera/Rep research")
getwd()
activity <- read.csv("./activity.csv")
head(activity)
valid_data <- activity[which(activity$steps =!NA)]
valid_data <- activity[which(activity$steps !=NA),]
head(valid_data)
valid_data <- activity[which(activity$steps !="NA"),]
head(valid_data)
typeof(date)
total_steps <- aggregate(steps~date, valid_data, sum)
head(total_steps)
ts <- tapply(activity$steps, activity$date, sum)
head(ts)
ts <- tapply(valid_data$steps, valid_data$date, sum)
head(ts)
ts1 <- tapply(valid_data$steps, valid_data$date, sum)
head(ts1)
head(valid_data)
tail(valid_data)
mean(valid_data$steps)
median(valid_data$steps)
mean(total_steps$date)
mean(total_steps)
mean(total_steps, na.rm=TRUE)
mean(total_steps$steps)
median(total_steps$steps)
library(ggplot2)
hist(total_steps$steps, main="Number of Steps", xlab= "Total number of steps taken each day", col = "light blue")
hist(total_steps$steps, main="Number of Steps", xlab= "Total number of steps taken each day", col = "gray")
dayly_average <- aggregate(steps~interval, valid_steps, mean)
dayly_average <- aggregate(steps~interval, valid_data, mean)
head(dayly_average)
head(valid_data)
library(ggplot2)
plot(dayly_average$interval, dayly_averagy$steps, type = "l", col = "gray", main = "Average daily activity pattern", xlab="5-minute interval", ylab="Average number of steps taken")
plot(dayly_average$interval, dayly_average$steps, type = "l", col = "gray", main = "Average daily activity pattern", xlab="5-minute interval", ylab="Average number of steps taken")
dayly_average[dayly_average$steps == max(dayly_average$steps),]
sum(is.na(activity))
na <- activity - valid_data
na <- activity[which(activity$steps = "NA"),]
na <- activity[which(activity$steps == "NA"),]
dim(na)
head(na)
dim(valid_data)
dim(activity)
a <- nrow(activity)
a
b <- nrow(valid_data)
a-b
nrow(activity)-nrwow(data_valid)
nrow(activity)-nrow(data_valid)
nrow(activity)-nrow(valid_data)
names(dayly_average)[2] <- "Average Steps" 
average$steps[is.na(average$steps)] <- dayly_average$Average Steps
names(dayly_average)[2] <- "AverageSteps"
activity$steps[is.na(activity$steps)] <- dayly_average$AverageSteps
head(activity)
sum(is.na(activity))
dim(activity)
dim(dayly_average)
head(valid_data)
 activity <- read.csv("./activity.csv")
head(activity)
ac <- omit(is.na(activity))
ac <- na.omit(activity)
head(ac)
tail(ac)
activity$steps[is.na(activity$steps)] <- dayly_averrage[which(activity$interval == dayly_average$interval),]$AverageSteps
activity$steps[is.na(activity$steps)] <- dayly_average[which(activity$interval == dayly_average$interval),]$AverageSteps
head(dayly_average)
tail(dayly_average)
head(total_steps)
tail(activity)
library("gam")
install.packages("gam")
library(gam)
activity1 <- na.gam.replace(activity)
head(activity1)
tail(activity1)
AllSteps <- aggregate(steps~date, activity1, sum)
head(AllSteps)
hist(AllSteps$steps, main="Number of Steps", xlab = "Total number of steps taken each day", col = "gray")
hist(AllSteps$steps, main="Number of Steps", xlab = "Total number of steps taken each day", col = "gray")
hist(total_steps$steps, main="Number of Steps", xlab = "Total number of steps taken each day", col = "gray")
hist(AllSteps$steps, main="Number of Steps", xlab = "Total number of steps taken each day", col = "gray")
mean(AllSteps)
mean(AllSteps$steps)
median(AllSteps$steps)
mean(valid_data$steps)
mean(total_steps$steps)
sum(AllSteps$steps) - sum(total_steps$steps)
sum(AllSteps$steps)
sum(total_steps$steps)
library(latice)
library(lattice)
weekdays <- weekdays(as.Date(activity1$date))
head(weekdays)
activity_weekdays <- transform(activity1, day = weekdays)
head(activity_weekdays)
days <- weekdays(activity1$date)
days <- weekdays(as.Date(activity1$date))
type_of_days <- ifelse(days == "Saturday" | days == "Sunday", 
                                "Weekend", "Weekday")
head(activity1)
activity$type_of_days <- ifelse(days == "Saturday" | days == "Sunday", 
                                "Weekend", "Weekday")
                                "Weekend", "Weekday")
activity1$type_of_day <- ifelse(days == "Saturday" | days == "Sunday", 
                                "Weekend", "Weekday")
head(activity1)
head(activity1,7)
tail(activity1)
activity1$date <- as.Date(activity1$date,"%Y-%m-%d")
activity1$type_of_day <- ifelse(days == "Saturday" | days == "Sunday", 
+                                 "Weekend", "Weekday")
days <- weekdays(as.Date(activity1$date))
activity1$type_of_day <- ifelse(days == "Saturday" | days == "Sunday", 
                                "Weekend", "Weekday")
head(activity1)
head(activity1,15)
sum(activity1$type_of_day == "Weekend")
sum(activity1$type_of_day == "Weekday")
newsteps <- aggregate(steps~interval+type_of_day, activity1, mean)
head(newsteps)
xyplot(steps~interval, type_of_day,newsteps, type="l", layout=c(1,2),xlab="Interval",ylab = "Number of steps")
names(newsteps) <- c("interval", "type_of_day", "steps")
xyplot(steps~interval, type_of_day,newsteps, type="l", layout=c(1,2),xlab="Interval",ylab = "Number of steps")
xyplot(steps~interval | type_of_day,newsteps, type="l", layout=c(1,2),xlab="Interval",ylab = "Number of steps")
head(newsteps)
install.packages("knitr")
library(knitr)
hist(total_steps$steps, main="Number of Steps", xlab= "Total number of steps taken each day", col = "gray")
hist(total_steps$steps, main="Number of Steps", xlab= "Total number of steps taken each day", col = "gray", breaks=10)
hist(total_steps$steps, main="Number of Steps", xlab= "Total number of steps taken each day", col = "gray", breaks=30)
hist(total_steps$steps, main="Number of Steps", xlab= "Total number of steps taken each day", col = "gray", breaks=100)
plot(dayly_average$interval, dayly_average$steps, type = "l", 
     col = "gray", main = "Average daily activity pattern", xlab="5-minute interval", ylab="Average number of step taken)
     col = "gray", main = "Average daily activity pattern", xlab="5-minute interval", ylab="Average number of step taken")
plot(dayly_average$interval, dayly_average$steps, type = "l", col = "gray", main = "Average daily activity pattern", xlab="5-minute interval", ylab="Average number of steps taken")
dayly_average <- aggregate(steps~interval, valid_data, mean)
avgStepsPerInterval <- ddply(activity, ~interval, summarise, mean = mean(steps, 
    na.rm = T))
plot(dayly_average$interval, dayly_average$steps, type = "l")
plot(dayly_average$interval, dayly_average$steps, type = "l", col = "gray", main = "Average daily activity pattern", xlab="5-minute interval", ylab="Average number of steps taken")
activity$steps[is.na(activity$steps)] <- dayly_average$AverageSteps
names(dayly_average)[2] <- "AverageSteps" 
activity$steps[is.na(activity$steps)] <- dayly_average$AverageSteps
getwd()
q()
